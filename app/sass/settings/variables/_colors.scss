/*
  Colors

  We first set the tones from design sheet as HSL values. These are
  then mapped to the respective role variables, which are more typically
  used throughout the project.
*/

// 1. Theme colors as HSL values.
$hsl-colors: (
  "black": (
    0,
    0%,
    0%,
  ),
  "white": (
    0,
    0%,
    100%,
  ),
  "transparent": (
    0,
    0%,
    0%,
    0,
  ),
  "red": (
    0,
    100%,
    53%,
  ),
  "very-dark-grayish-blue": (
    220,
    41%,
    23%,
  ),
  "dark-grayish-blue": (
    220,
    12%,
    29%,
  ),
  "ligh-grayish-blue": (
    221,
    15%,
    76%,
  ),
  "grey": (
    0,
    0%,
    51%,
  ),
  "grey-1": (
    0,
    0%,
    71%,
  ),
  "grey-2": (
    0,
    0%,
    77%,
  ),
  "grey-3": (
    0,
    0%,
    51%,
  ),
);

// 2. Functional colors
$functional-colors: (
  "text": "white",
  "text-inverted": "black",
  "primary": "white",
  "secondary": "black",
  "error": "red",
  "background": "black",
  "background--primary": "black",
  "background--secondary": "white",
  "disabled--text": "grey-3",
  "disabled--background": "grey-1",
);

:root {
  // Generate hsl variables, e.g. --hsl-black
  @each $name, $value in $hsl-colors {
    --hsl--#{$name}: #{$value};
  }

  // Generate colors, e.g. --color-black
  @each $name, $value in $hsl-colors {
    --color--#{$name}: hsl(var(--hsl--#{$name}));
  }

  // Generate functional hsl variables, e.g. --hsl-primary
  @each $name, $value in $functional-colors {
    --hsl--#{$name}: var(--hsl--#{$value});
  }

  // Generate functional colors, e.g. --color-primary
  @each $name, $value in $functional-colors {
    --rnb--color--#{$name}: hsl(var(--hsl--#{$name}));
  }

  // 3. Colors with a specified alpha value (Translucent colors)
  // remove unnecessary & add colors with a spesific alpha value: color name => hsl(hsl-variable, alpha-value)
  --rnb--color--black-80: hsl(var(--hsl--black) 0.8);
  --rnb--color--secondary-25: hsl(var(--hsl--secondary) 0.25);
}
